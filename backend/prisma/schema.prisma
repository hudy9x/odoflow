// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TriggerType {
  WEBHOOK
  SCHEDULED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  workflows    Workflow[]    // One-to-many with Workflow
  workflowRuns WorkflowRun[] // One-to-many with WorkflowRun
  webhooks     Webhook[]     // One-to-many with Webhook
}

model Workflow {
  id            String      @id @default(cuid())
  userId        String
  name          String
  description   String?
  isActive      Boolean     @default(false)
  startingNodeId String?
  triggerType   TriggerType?
  triggerValue  String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relationships
  user         User           @relation(fields: [userId], references: [id])
  nodes        WorkflowNode[] // One-to-many with WorkflowNode
  edges        WorkflowEdge[] // One-to-many with WorkflowEdge
  workflowRuns WorkflowRun[]  // One-to-many with WorkflowRun
}

model WorkflowNode {
  id         String   @id @default(uuid())
  workflowId String
  type       String   // e.g., "webhookTrigger", "apiCall"
  name       String
  positionX  Int
  positionY  Int
  data       Json     // PostgreSQL JSONB for flexible configuration
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  workflow      Workflow       @relation(fields: [workflowId], references: [id])
  outgoingEdges WorkflowEdge[] @relation("SourceNode") // One-to-many (as source)
  incomingEdges WorkflowEdge[] @relation("TargetNode") // One-to-many (as target)
}

model WorkflowEdge {
  id         String   @id @default(uuid())
  workflowId String
  sourceId   String
  targetId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  workflow    Workflow     @relation(fields: [workflowId], references: [id])
  sourceNode  WorkflowNode @relation("SourceNode", fields: [sourceId], references: [id])
  targetNode  WorkflowNode @relation("TargetNode", fields: [targetId], references: [id])
}

model WorkflowRun {
  id           String    @id @default(uuid())
  workflowId   String
  triggeredById String?
  status       String    @default("PENDING") // "PENDING", "RUNNING", "SUCCESS", "FAILED", "CANCELLED"
  triggeredAt  DateTime  @default(now())
  startedAt    DateTime?
  completedAt  DateTime?
  durationMs   Int?

  // Relationships
  workflow    Workflow         @relation(fields: [workflowId], references: [id])
  triggeredBy User?           @relation(fields: [triggeredById], references: [id])
  logs        WorkflowRunLog[] // One-to-many with WorkflowRunLog
}

model Webhook {
  id        String   @id @default(uuid())
  name      String
  url       String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user      User     @relation(fields: [userId], references: [id])
}

model WorkflowRunLog {
  id           String    @id @default(uuid())
  workflowRunId String
  nodeId       String
  nodeType     String
  nodeName     String?
  status       String    @default("STARTED") // "STARTED", "COMPLETED", "FAILED"
  message      String?
  inputData    Json?     // PostgreSQL JSONB
  outputData   Json?     // PostgreSQL JSONB
  error        Json?     // PostgreSQL JSONB
  startedAt    DateTime  @default(now())
  completedAt  DateTime?
  durationMs   Int?

  // Relationships
  workflowRun WorkflowRun @relation(fields: [workflowRunId], references: [id])
}
